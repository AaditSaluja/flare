import sys
sys.path.append('..')
import otf
import kernels
import gp
import copy
import numpy as np


qe_input = 'Al_md.in'
dt = 0.001
number_of_steps = 5000000  # 5 ns
std_tolerance_factor = 1
pw_loc = '/n/home03/jonpvandermause/qe-6.2.1/bin/pw.x'
init_atoms = [1, 5, 10, 15, 20, 25, 30]


pos = np.array([[2.102206149, 2.17737915, 0.109113599],
                [1.922396715, 0.038536746, 2.074840004],
                [0.073386116, 1.975432502, 1.901271409],
                [-0.007303925, 0.139900532, 4.307704064],
                [2.069632936, 1.852826914, 3.86282843],
                [2.075024249, 0.113072629, 6.20623834],
                [-0.068653084, 1.487145808, 6.638712514],
                [0.063273928, 3.911893797, -0.416121315],
                [2.056071752, 6.34728195, 0.121497549],
                [2.068411307, 4.204145825, 2.141313766],
                [0.081816322, 5.959837862, 2.191802095],
                [0.075735297, 3.631231037, 4.02144364],
                [2.195934539, 6.144239286, 3.991566492],
                [2.075014198, 4.22107171, 5.89509062],
                [0.109670676, 5.9184785, 5.844710297],
                [3.987337907, 0.248900919, 0.108194742],
                [5.963879511, 2.258413097, -0.099035367],
                [6.243706383, -0.171238539, 2.027436286],
                [4.017468043, 2.062071886, 2.106652704],
                [4.008519381, -0.05695792, 4.064978736],
                [6.045208457, 1.665292497, 3.773710901],
                [5.802641633, -0.030351203, 5.995212259],
                [3.956509066, 2.256351057, 5.972951813],
                [3.896509121, 4.203498367, -0.02496773],
                [6.044676144, 6.287042881, -0.045843135],
                [6.101536821, 3.974699953, 1.985909757],
                [4.201125196, 6.009072615, 2.147580718],
                [4.10209373, 4.068057955, 4.01880044],
                [6.102661233, 5.770182894, 4.136778889],
                [5.91466668, 4.215698177, 6.118523223],
                [3.82284352, 6.220791115, 5.925104262]])

# previous positions copied from iteration 1063 of Al_MD_800K/Al_md.out
prev_pos = \
    np.array([[2.105400839,   2.172994185,   0.103843680],
              [1.918136433,   0.034728281,   2.076660025],
              [0.070295717,   1.968874719,   1.898228063],
              [-0.004514025,   0.130686919,  4.306552878],
              [2.069818157,  1.853314971,   3.871412492],
              [2.083751521,   0.112193175,   6.209896700],
              [-0.064096446,   1.496226661,   6.639406433],
              [0.064316886,   3.917324478,  -0.409748905],
              [2.053281808,   6.355612318,   0.118273624],
              [2.066562230,   4.212333069,   2.139991353],
              [0.068933257,   5.959640309,   2.187792361],
              [0.075082454,   3.633839934,   4.017222625],
              [2.209023210,   6.150925533,   3.988869858],
              [2.081573026,   4.218740310,   5.899370905],
              [0.111037590,   5.920793040,   5.854946800],
              [3.980680619,   0.244263831,   0.100984080],
              [5.963658071,   2.262839946,  -0.094914715],
              [6.247075952,  -0.174473789,   2.021958098],
              [4.017196668,   2.053891511,   2.105538688],
              [4.014108327,  -0.060896489,   4.063023203],
              [6.045126624,   1.660084332,   3.768262249],
              [5.802589008,  -0.030816161,   5.998117650],
              [3.951483249,   2.263182146,   5.972715920],
              [3.892013953,   4.206463008,  -0.026665874],
              [6.042286950,   6.284098661,  -0.048016735],
              [6.101038064,   3.974787367,   1.988294142],
              [4.195326269,   6.004730444,   2.142320884],
              [4.099732336,   4.068388052,   4.018544217],
              [6.108778135,   5.772384344,   4.141985610],
              [5.910022994,   4.216353902,   6.122989085],
              [3.824280122,   6.220490993,   5.926144605]])

# calculate initial temperature
fac = 1
kb = 0.0000861733034
noa = len(prev_pos)
disp = pos - prev_pos
prev_pos_mod = pos - disp*fac
disp_mod = pos - prev_pos_mod
vel = disp_mod/dt
mass = 27 * 0.00010364269933008285
KE = 0.5 * mass * np.sum(vel**2)
base_temp = 2 * KE / (3 * (noa-1) * kb)

# scale velocities to target temperature
target_temp = 2000
fac = np.sqrt(target_temp / base_temp)
disp = pos - prev_pos
prev_pos_mod = pos - disp*fac
disp_mod = pos - prev_pos_mod
vel = disp_mod/dt
KE = 0.5 * mass * np.sum(vel**2)
temp = 2 * KE / (3 * (noa-1) * kb)


# set gp model
kernel = kernels.two_plus_three_body
kernel_grad = kernels.two_plus_three_body_grad
hyps = np.array([0.2,  1., 0.001,
                 1., 0.1])
cutoffs = np.array([5.4, 3.5])
hyp_labels = ['sig2', 'ls2', 'sig3', 'ls3', 'noise']
energy_force_kernel = kernels.two_plus_three_force_en
energy_kernel = kernels.two_plus_three_en
opt_algorithm = 'BFGS'

gp_model = gp.GaussianProcess(kernel, kernel_grad, hyps, cutoffs, hyp_labels,
                              energy_force_kernel, energy_kernel,
                              opt_algorithm)

# set up otf
al_otf = otf.OTF(qe_input, dt, number_of_steps, gp_model,
                 pw_loc, std_tolerance_factor,
                 prev_pos_init=prev_pos_mod, par=True, parsimony=True,
                 skip=100, hyps=hyps, init_atoms=init_atoms)

al_otf.run()
